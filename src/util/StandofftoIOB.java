/****************************************************************/
/* Class StandofftoIOB                                          */
/* Reads the standoff file generated by the Brat tool after     */
/* data annotation and converts it back to IOB format           */
/*                                                              */
/* Author: Vivian Silva                                         */
/****************************************************************/

package util;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

public class StandofftoIOB {
	
	//Read the raw data file in the format id|POS|word_list|definition
    private static List<String> loadDataFile(String inputfile){
    	
    	List<String> definitions = new ArrayList<String>();
    	
    	try{
			BufferedReader br = new BufferedReader(new FileReader(inputfile));
			try{
				String line = null;
				
				while ((line = br.readLine()) != null) {
					definitions.add(line);
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		} catch (FileNotFoundException f){
			f.printStackTrace();
		}
    	return definitions;
    }
	
	@SuppressWarnings("unchecked")
	private static Vector<Vector<String>> loadStandoffFile(String inputfile){
		
		Vector<Vector<String>> roles = new Vector<Vector<String>>();
    	
    	try{
			BufferedReader br = new BufferedReader(new FileReader(inputfile));
			try{
				String line = null;
				Vector<String> role = new Vector<String>();
				
				while ((line = br.readLine()) != null) {
					String tokens[] = line.split("\t");
					for (String token : tokens){
						role.add(token);
					}
					roles.add((Vector<String>)role.clone());
					role.clear();
						
				}
				roles.add((Vector<String>)role.clone());
			} catch (IOException e) {
				e.printStackTrace();
			}
		} catch (FileNotFoundException f){
			f.printStackTrace();
		}
    	
    	return roles;
	}
	
	private static List<Integer> retrieveIndexes (List<String> definitions){
		
		List<Integer> indexes = new ArrayList<Integer>();
		int nextIndex = 0;
		
		for (String line : definitions){
			String def = line.split("\\|")[3];
			int len = def.length();
			int index = nextIndex + len;
			
			indexes.add(index);
			nextIndex = index + 1;
		}
		return indexes;
	}
	
	private static Vector<Vector<String>> sortRoles(Vector<Vector<String>> roles){
		
		Vector<Vector<String>> sorted = new Vector<Vector<String>>();
		
		int nextIndex = 0;
		int totalRoles = 0;
		
		while (totalRoles < roles.size() - 1){
			for (Vector<String> role : roles){
				if (Integer.parseInt(role.get(1).split(" ")[1]) == nextIndex){
					sorted.add(role);
					nextIndex = Integer.parseInt(role.get(1).split(" ")[2]) + 1;
					totalRoles++;
					break;
				}
			}
		}
		return sorted;
	}
	
	@SuppressWarnings("unchecked")
	private static void toIOBFormat(String datafile, String outputfile){
		
		Vector<Vector<String>> roles = sortRoles(loadStandoffFile(datafile));
		List<Integer> indexes = retrieveIndexes(loadDataFile("input/definitions.txt"));
		Vector<Vector<String>> pairs = new Vector<Vector<String>>();
		Vector<String> records = new Vector<String>();
		
		for (Vector<String> role : roles){
			Vector<String> pair = new Vector<String>();
			pair.add(role.get(2));					//text
			pair.add(role.get(1).split(" ")[0]);	//role
			pair.add(role.get(1).split(" ")[1]);	//start index
			pair.add(role.get(1).split(" ")[2]);	//end index
			pairs.add((Vector<String>) pair.clone());
			pair.clear();
		}
		
		int pointer = 0;
		int index = indexes.get(pointer);
		boolean newRecord = true;
		
		for (Vector<String> pair : pairs){
			String[] text = pair.get(0).split(" ");
			String label = pair.get(1);
			int end = Integer.valueOf(pair.get(3));
			
			if (newRecord){
				records.add("BOS O\n");
				newRecord = false;
			}
			
			String line = "";
			if (label.equals("O")){
				for (String word : text){
					line = word + " " + label + "\n";
					records.add(line);
				}
			}
			else{
				line = text[0] + " B-" + label + "\n";
				records.add(line);
				
				for (int i=1; i < text.length; i++){
					line = text[i] + " I-" + label + "\n";
					records.add(line);
				}
			}
			
			if (end == index){
				records.add("EOS O\n\n");
				newRecord = true;
				pointer++;
				index = pointer < indexes.size() ? indexes.get(pointer) : indexes.size()-1;
			}
		}
		
		try {
	        FileWriter writer = new FileWriter(outputfile);
	        for (String record: records) {
	            writer.write(record);
	        }
	        writer.flush();
	        writer.close();
	    }catch(IOException e){  
			e.printStackTrace();
		}
		System.out.println("IOB file saved in the output folder.");
	}
	
	public static void main (String args[]){
		
		toIOBFormat("input/standoff.txt", "output/IOB.txt");
	}


}
